package com.user.service.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.user.service.entities.User;
import com.user.service.serv.UserService;

// Indicamos que est aclase es un controlador REST
// permite manejar solicitudes HTTP y devolver respuestas en formato JSON o similar
@RestController
// Especificamos la ruta base para todas las solicitudes que maneja este controlador
// Caso especidico "todas las rutas comenzaran con "/user"
@RequestMapping("/use")
public class UserController {

// inyeccion de depedencias UserService
// Permite usar los metodos de UserService sin necesidad de crear manualmente una instancia
	@Autowired
	private UserService userService;
	
	@GetMapping
	public ResponseEntity<List<User>> listUsers() {
		List<User> users = userService.getAll();
		if(users.isEmpty()) {
			return ResponseEntity.noContent().build();
		}
		return ResponseEntity.ok(users);
	}
	@GetMapping("/{id}")
	public ResponseEntity<User> obtenerUser(@PathVariable("id") int id){
		User user = userService.getUserById(id);
				if (user == null) {
					return ResponseEntity.notFound().build();
				}
		return ResponseEntity.ok(user);
	}
	
	// Metodo para poder guardar el usuario
	@PostMapping
	public ResponseEntity<User> saveUser(@RequestBody User user){
		User newUser = userService.save(user);
		return ResponseEntity.ok(newUser);
	}
	
}
